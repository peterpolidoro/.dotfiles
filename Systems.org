#+title: Peter Polidoro System Configuration with Guix
#+AUTHOR: Peter Polidoro
#+EMAIL: peter@polidoro.io
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

* Systems

** Base Configuration

** Machines

*** Per-System Settings

Some settings need to be customized on a per-system basis without tweaking
individual configuration files. Thanks to org-mode's =noweb= functionality, I
can define a set of variables that can be tweaked for each system and applied
across these configuration files when they get generated.

I also define a function called =pjp/system-settings-get= which can retrieve
these settings appropriately.

#+begin_src emacs-lisp :tangle .emacs.d/per-system-settings.el :noweb yes

(require 'map) ;; Needed for map-merge

(setq pjp/system-settings
      (map-merge
       'list
       '((desktop/dpi . 180)
         (emacs/default-face-size . 220)
         (emacs/variable-face-size . 245)
         (emacs/fixed-face-size . 200)
         )))
       ;; <<system-settings>>))

#+end_src

** Upgrading

*.bin/upgrade-system*

#+begin_src sh :tangle .bin/upgrade-system :shebang #!/usr/bin/env bash

FILE=/etc/config.scm
if [ -f "$FILE" ]; then
    echo "Upgrading Guix System..."
    guix pull
    sudo guix system reconfigure /etc/config.scm
else
    echo "Upgrading Guix on a Debian-based foreign distro..."
    sudo apt update -y && sudo apt full-upgrade -y && sudo apt autoremove -y && sudo apt clean -y && sudo apt autoclean -y
    sudo -i guix pull
    sudo systemctl restart guix-daemon.service
fi

#+end_src

*.bin/upgrade-packages*

#+begin_src sh :tangle .bin/upgrade-packages :shebang #!/usr/bin/env bash

# Navigate to the directory of this script (generally ~/.dotfiles/.bin)
cd $(dirname $(readlink -f $0))

guix pull
guix package -u
./upgrade-profiles

#+end_src

*.bin/get-status*

#+begin_src sh :tangle .bin/get-status :shebang #!/usr/bin/env bash

echo "mr status: ~/Repositories"
cd ~/Repositories
mr -m status 2>/dev/null | sed '/^$/d'

echo "git status: ~/.dotfiles"
cd ~/.dotfiles
git status -s

echo "git status: ~/.password-store"
cd ~/.password-store
git status -s

#+end_src

*.bin/pull-repositories*

#+begin_src sh :tangle .bin/pull-repositories :shebang #!/usr/bin/env bash

sleep 1
echo "git pull: ~/.dotfiles"
cd ~/.dotfiles
git pull

sleep 1
echo "git pull: ~/.password-store"
cd ~/.password-store
git pull

echo "git pull: ~/Repositories"
cd ~/Repositories
mr checkout
mr run sleep 1 && git fetch --all 2>/dev/null
mr run sleep 1 && git pull 2>/dev/null

#+end_src

*.bin/sync-email*

#+begin_src sh :tangle .bin/sync-email :shebang #!/usr/bin/env bash

mbsync -a
mu init --maildir=~/Email/ --my-address=peterpolidoro@gmail.com --my-address=polidorop@janelia.hhmi.org --my-address=peter@polidoro.io
mu index

#+end_src

*.bin/setup-keybindings*

#+begin_src sh :tangle .bin/setup-keybindings :shebang #!/usr/bin/env bash

# ubuntu
sudo apt install python3-pip
sudo pip3 install xkeysnail

sudo cp ~/.dotfiles/.config/xkeysnail/xkeysnail.service /etc/systemd/system/
sudo systemctl enable xkeysnail
sudo systemctl start xkeysnail
# In the Firefox location bar, go to about:config, search for ui.key.menuAccessKeyFocuses, and set the Value to false.

#+end_src

*.bin/upgrade-guix*

#+begin_src sh :tangle .bin/upgrade-guix :shebang #!/usr/bin/env bash

# Navigate to the directory of this script (generally ~/.dotfiles/.bin)
cd $(dirname $(readlink -f $0))
./upgrade-system
./upgrade-packages
#+end_src

*.bin/upgrade-all*

#+begin_src sh :tangle .bin/upgrade-all :shebang #!/usr/bin/env bash

# Navigate to the directory of this script (generally ~/.dotfiles/.bin)
cd $(dirname $(readlink -f $0))
./upgrade-system
./upgrade-packages
./pull-repositories
./sync-email
#+end_src

* Profile Management

I like to separate my packages into separate manifests that get installed as
profiles which can be upgraded independently. These profiles get installed under
the =~/.guix-extra-profiles= path and sourced by my =~/.profile= when I log in.

To make the management of multiple profiles easier, I've created a couple of shell scripts:

** Activating Profiles

This script accepts a space-separated list of manifest file names (without extension) under the =~/.config/guix/manifests= folder and then installs those profiles for the first time.  For example:

#+begin_src sh

activate-profiles desktop emacs music

#+end_src

*.bin/activate-profiles:*

#+begin_src sh :tangle .bin/activate-profiles :shebang #!/bin/bash

# NOTE: This file is generated from ~/.dotfiles/Systems.org.  Please see commentary there.

GREEN='\033[1;32m'
RED='\033[1;30m'
NC='\033[0m'
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

profiles=$*
if [[ $# -eq 0 ]]; then
    profiles="$HOME/.config/guix/manifests/*.scm";
fi

for profile in $profiles; do
    # Remove the path and file extension, if any
    profileName=$(basename $profile)
    profileName="${profileName%.*}"
    profilePath="$GUIX_EXTRA_PROFILES/$profileName"
    manifestPath=$HOME/.config/guix/manifests/$profileName.scm

    if [ -f $manifestPath ]; then
        echo
        echo -e "${GREEN}Activating profile:" $manifestPath "${NC}"
        echo

        mkdir -p $profilePath
        guix package --manifest=$manifestPath --profile="$profilePath/$profileName"

        # Source the new profile
        GUIX_PROFILE="$profilePath/$profileName"
        if [ -f $GUIX_PROFILE/etc/profile ]; then
            . "$GUIX_PROFILE"/etc/profile
        else
            echo -e "${RED}Couldn't find profile:" $GUIX_PROFILE/etc/profile "${NC}"
        fi
    else
        echo "No profile found at path" $profilePath
    fi
done

#+end_src

** Upgrading Profiles

This script accepts a space-separated list of manifest file names (without extension) under the =~/.config/guix/manifests= folder and then installs any upgrades to the packages contained within them.  If no profile names are provided, it walks the list of profile directories under =~/.guix-extra-profiles= and upgrades each one of them.

#+begin_src sh

upgrade-profiles emacs

#+end_src

*.bin/upgrade-profiles:*

#+begin_src sh :tangle .bin/upgrade-profiles :shebang #!/bin/bash

# NOTE: This file is generated from ~/.dotfiles/Systems.org.  Please see commentary there.

GREEN='\033[1;32m'
NC='\033[0m'
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

profiles=$*
if [[ $# -eq 0 ]]; then
    profiles="$GUIX_EXTRA_PROFILES/*";
fi

for profile in $profiles; do
    profileName=$(basename $profile)
    profilePath=$GUIX_EXTRA_PROFILES/$profileName

    echo
    echo -e "${GREEN}Upgrading profile:" $profilePath "${NC}"
    echo

    guix package --profile="$profilePath/$profileName" --manifest="$HOME/.config/guix/manifests/$profileName.scm"
done

#+end_src

* Dotfiles Management

** Upgrading

Upgrading my dotfiles requires running a script in Emacs to loop over all of my literate configuration =.org= files and run =org-babel-tangle-file= to make sure all of my configuration files are up to date.

*.bin/upgrade-dotfiles*

#+begin_src sh :tangle .bin/upgrade-dotfiles :shebang #!/usr/bin/env bash

# Navigate to the directory of this script (generally ~/.dotfiles/.bin)
cd $(dirname $(readlink -f $0))
cd ..

# The heavy lifting is done by an Emacs script
emacs -Q --script ./.emacs.d/tangle-dotfiles.el

# Make sure any running Emacs instance gets upgraded settings
emacsclient -e '(load-file "~/.emacs.d/per-system-settings.el")' -a "echo 'Emacs is not currently running'"

# Upgrade configuration symlinks
make install

#+end_src

*.emacs.d/tangle-dotfiles.el*

#+begin_src emacs-lisp :tangle .emacs.d/tangle-dotfiles.el

(require 'org)
(load-file "~/.dotfiles/.emacs.d/lisp/pjp-settings.el")

;; Don't ask when evaluating code blocks
(setq org-confirm-babel-evaluate nil)

(let* ((dotfiles-path (expand-file-name "~/.dotfiles"))
	     (org-files (directory-files dotfiles-path nil "\\.org$")))

  (defun pjp/tangle-org-file (org-file)
    (message "\n\033[1;32mUpgrading %s\033[0m\n" org-file)
    (org-babel-tangle-file (expand-file-name org-file dotfiles-path)))

  ;; Tangle Systems.org first
  (pjp/tangle-org-file "Systems.org")

  (dolist (org-file org-files)
    (unless (member org-file '("README.org" "Systems.org"))
      (pjp/tangle-org-file org-file))))

#+end_src
